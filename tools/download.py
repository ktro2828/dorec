#!/usr/bin/env python

import os
import os.path as osp

import gdown

# TODO


def download_dataset(output="data", quiet=False):
    """Download sample data generated by https://github.com/ktro2828/Turnedup-Scene-Generator.git
    Args:
        output (str, optional): output directory path (default: data)
        quiet (bool): suppress terminal output (default: False)
    """
    if not osp.exists(output):
        os.makedirs(output)
    url = ""
    md5 = ""
    gdown.cached_download(
        url, osp.join(output, "dataset.zip"), md5=md5, quiet=quiet)


def download_bag(output="data", quiet=False):
    """Download sample rosbag
    Args:
        output (str): output directory path
        quiet (bool): suppress terminal output (default: False)
    """
    if not osp.exists(output):
        os.makedirs(output)
    url = ""
    md5 = ""
    gdown.cached_download(
        url, osp.join(output, "rosbag.zip"), md5=md5, quiet=quiet)


def download_model(output="data", quiet=False):
    """Download pre-trained models
    Args:
        output (str): output directory path
        quiet (bool): suppress terminal output (default: False)
    """
    if not osp.exists(output):
        os.makedirs(output)
    url = ""
    md5 = ""
    gdown.cached_download(
        url, osp.join(output, "pretrained.zip"), md5=md5, quiet=quiet)


def download_query(output="data", quiet=False):
    """Download query data for dense-matching
    Args:
        output (str): output directory path
        quiet (bool): suppress terminal output (default: False)
    """
    if not osp.exists(output):
        os.makedirs(output)
    url = ""
    md5 = ""
    gdown.cached_download(
        url, osp.join(output, "pretrained.zip"), md5=md5, quiet=quiet)


def main():
    import argparse

    parser = argparse.ArgumentParser(
        description="download all samples of dataset, rosbag, model, and query data")
    parser.add_argument("-o", "--output", type=str,
                        default="data", help="root path of output directory")
    args = parser.parse_args()

    download_dataset(output=args.output)
    download_bag(output=args.output)
    download_model(output=args.output)
    download_query(output=args.output)


if __name__ == "__main__":
    main()
